@page "/MyNotes"

@inject IMyNoteService MyNoteService
@inject IJSRuntime jsRuntime
<h3>MyNotes</h3>

<table class="table">
    <thead>
        <tr>
            <th>Item</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var Item in l_mynotes)
        {
            <tr>
                @*show Item name*@
                <td>@Item.title</td>
                @*call C# Fuction Add Action*@
                <td><input type="button" class="btn btn-primary" value="Edit" @onclick="()=>Edit(Item)" /></td>
                @*call C# Function Delete Action *@
                <td><input type="button" class=" btn btn-danger" value="Delete" @onclick="()=>Delete(Item)" /></td>
            </tr>
        }
    </tbody>
</table>
<div>
    @*add button click*@
    <input type="button" class="btn btn-primary" value="Add" @onclick="()=>Add()" />
</div>

@if (isshowPopup) {
<div class="modal" tabindex="-1" role="dialog" style="display:block">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class=" modal-title">記事項目</h5>
                @*彈跳視窗內建立關閉按鈕*@
                <button type="button" class="close" @onclick="CloseDialog">
                    <span aria-hidden="true">x</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class=" col-9">
                        <div class="row p-2">
                            @*使用Blazor 提供的EditForm 原件來進行表單資料輸入與驗證*@
                            @*其中EdotForm提供有效資料驗證 OnValidSubmit*@
                            <EditForm Model="@CurrentMyNote" OnValidSubmit="@HandleValidSubmit">
                                @*DataAnnotationsValidator 元件會使用資料模型的屬性宣告，將驗證支援附加至EditContext*@
                                <DataAnnotationsValidator />
                                @*ValidationSummary元件會匯總所有驗證訊息*@
                                <ValidationSummary />
                                <div class=" form-group">
                                    <label for="taskName">事項名稱</label>
                                    @*這裡提供使用者輸入該事項的名稱並會儲存到Title屬性內*@
                                    <InputText id="name" class="form-control" @bind-Value="CurrentMyNote.title" />
                                </div>
                                <button type="submit" class="btn btn-primary">Sava</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
}

@code {
    /*save all of List*/
    public List<MyNote> l_mynotes = new List<MyNote>();
    /*Editing ot Add object*/
    public MyNote CurrentMyNote = new MyNote();
    /*Editing ot Add object before*/
    public MyNote OrigMyNote = new MyNote();

    public string DialogIdName = "myModel";

    public bool isshowPopup = false;
    public bool IsNewMode;

    protected override async Task OnInitializedAsync()
    {
        l_mynotes = await MyNoteService.RetriveAsync();
    }
    private async void Delete(MyNote deleteNote)
    {
        await MyNoteService.DeleteAsync(deleteNote);
        //刷新資料行列
        l_mynotes = await MyNoteService.RetriveAsync();
        StateHasChanged();
    }
    private  void Add()
    {
        /*設定此次要進行新增一筆紀錄*/
        IsNewMode = true;
        CurrentMyNote = new MyNote();
        /*顯示視窗*/
        isshowPopup = true;
        //await jsRuntime.InvokeAsync<object>("ShowModal", DialogIdName);

    }

    private void Edit(MyNote editItem)
    {
        IsNewMode = false;
        CurrentMyNote = OrigMyNote = editItem.Clone();
        CurrentMyNote = editItem.Clone();
        OrigMyNote = editItem;
        isshowPopup = true;
        //await jsRuntime.InvokeAsync<object>("ShowModal", DialogIdName);
    }

    private void CloseDialog()
    {
        isshowPopup = false;
    }
    private async void HandleValidSubmit()
    {
        isshowPopup = false;

        if (IsNewMode == true)
        {
            await MyNoteService.CreateAsync(CurrentMyNote);
        }
        else
        {
            /*修改內容*/
            await MyNoteService.EditAsync(OrigMyNote, CurrentMyNote);
        }
        l_mynotes = await MyNoteService.RetriveAsync();
        StateHasChanged();
    }
}
